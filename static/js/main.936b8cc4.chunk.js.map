{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialStartTime","Date","initialEndTime","setMinutes","getMinutes","now","moment","second","exam_info","course_name","exam_name","start_time","end_time","instructions","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showSettings","handleSettingsSubmit","bind","assertThisInitialized","toggleSettingsVisibility","updated_exam_info","setState","react_default","a","createElement","className","App_SetupBar","handleSubmit","toggleSettings","App_ExamClock","Component","SetupBar","_this2","handleStartTimeChange","value","toDate","handleEndTimeChange","handleChange","event","target","name","defineProperty","preventDefault","onClick","onSubmit","htmlFor","id","type","onChange","es","showSecond","defaultValue","format","use12Hours","inputReadOnly","ExamClock","_this3","date","_this4","timerID","setInterval","tick","clearInterval","style","color","toLocaleTimeString","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.936b8cc4.chunk.js","sourcesContent":["import TimePicker from 'rc-time-picker'; \nimport 'rc-time-picker/assets/index.css'; // Remember to add CSS for this!\nimport React, { Component } from 'react';\nimport './App.css';\n\nimport moment from 'moment';\n\n\n/* Time zone stuff */\nlet initialStartTime = new Date();\nlet initialEndTime = new Date();\ninitialEndTime.setMinutes(initialEndTime.getMinutes() + 50) // 50 minute long exam\nconst now = moment().second(0);\n\n\nconst exam_info = {\n  course_name:\"Underwater Basket Weaving\",\n  exam_name: \"Midterm 1\",\n  start_time: initialStartTime,\n  end_time: initialEndTime,\n  instructions: \"Remember to write your name. No cheating.\",\n}\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      exam_info: exam_info,\n      showSettings: true,\n    }\n    this.handleSettingsSubmit = this.handleSettingsSubmit.bind(this);\n    this.toggleSettingsVisibility = this.toggleSettingsVisibility.bind(this);\n  }\n\n  handleSettingsSubmit(updated_exam_info) {\n    this.setState( {exam_info: updated_exam_info} );\n  }\n\n  toggleSettingsVisibility() {\n    this.setState({ showSettings:(!this.state.showSettings) });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SetupBar \n          exam_info={this.state.exam_info}\n          handleSubmit={this.handleSettingsSubmit}\n          toggleSettings={this.toggleSettingsVisibility}\n          showSettings={this.state.showSettings}\n         />\n        <h1>{this.state.exam_info.course_name}: {this.state.exam_info.exam_name} </h1>\n        {/* Convert Date string in JSON object to Date object here*/}\n        <ExamClock \n          start_time = {this.state.exam_info.start_time}\n          end_time = {this.state.exam_info.end_time}\n          instructions = {this.state.exam_info.instructions}\n        />\n      </div>\n    );\n  }\n}\n\nclass SetupBar extends Component {\n  /* An unobtrusive bar to access setup/settings.\n    This component has state which is 'forwarded' to the main App when the \n    submit button is pressed. */ \n\n  constructor(props) {\n    super(props);\n    this.state = this.props.exam_info;\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleStartTimeChange = this.handleStartTimeChange.bind(this);\n    this.handleEndTimeChange = this.handleEndTimeChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  // Converting moment() to normal JS date with toDate()\n  handleStartTimeChange = (value) => this.setState({ start_time: value.toDate() });\n  handleEndTimeChange   = (value) => this.setState({ end_time:   value.toDate() }); \n\n  handleSubmit(event) {\n    /* Submit Changes on Form to the Main App */\n    this.props.handleSubmit(this.state); // Pass this component's state upwards\n    event.preventDefault();\n  }\n  render() {\n    \n    const format = 'h:mm a' // Formatting for rc-time-picker\n\n    return(\n      <div className=\"SetupBar\">\n        <button \n          onClick={this.props.toggleSettings}\n        >\n          {this.props.showSettings ? \"Hide Setup\" : \"Setup\" }\n        </button>\n\n        <div \n          className={this.props.showSettings ? \"SetupForm\" : \"SetupFormHidden\"}\n        >\n          <form onSubmit={this.handleSubmit}>\n\n            <label htmlFor=\"course_name\">Course name: </label>\n            <input \n              id=\"course_name\" \n              name=\"course_name\" // Name attribute needed for controlled components\n              type=\"text\" \n              value={this.state.course_name} \n              onChange={this.handleChange}\n            /><br />\n\n            <label htmlFor=\"exam_name\">Exam name: </label>\n            <input \n              id=\"exam_name\" \n              name=\"exam_name\"\n              type=\"text\" \n              value={this.state.exam_name}\n              onChange={this.handleChange}\n            /><br /><br />\n\n\n            <label htmlFor=\"start_time\">Start time: </label>\n            <TimePicker \n              showSecond={true}\n              defaultValue={now}\n              className=\"SetupFormTime\"\n              onChange={this.handleStartTimeChange}\n              format={format}\n              use12Hours\n              inputReadOnly\n            /><br />\n\n            <label htmlFor=\"end_time\">End time: </label>\n            <TimePicker \n              showSecond={true}\n              defaultValue={now}\n              className=\"SetupFormTime\"\n              onChange={this.handleEndTimeChange}\n              format={format}\n              use12Hours\n              inputReadOnly\n            /><br /><br />\n\n            <label htmlFor=\"instructions\">Instructions: </label>\n            <textarea \n              id=\"instructions\" \n              name=\"instructions\"\n              value={this.state.instructions}\n              onChange={this.handleChange}\n            /><br />\n\n            <label htmlFor=\"submitButton\"></label>\n            <input id=\"submitButton\" type=\"submit\" value=\"Apply Changes\" />\n\n            {/* Add reset changes button */}\n\n          </form>\n        </div>\n        <hr />\n      </div>\n    )\n  }\n}\n\nclass ExamClock extends Component {\n  constructor(props){\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n  componentWillUnMount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    })\n  }\n\n  render() {\n    // For styling conditionally rendered announcements\n    let unurgent = {color: 'grey'};\n    let ongoing = {color: 'lime'}\n    let urgent = {color: 'red'};\n\n    return(\n      <div> {/* Conditionally rendered announcement appear above large timer */}\n        {(this.state.date < this.props.start_time) ? \n          <span style={unurgent}>Hold up! The exam has not started yet.</span>\n          : (this.state.date < this.props.end_time) ? \n            <span style={ongoing}>Exam in progress...</span>\n            : <span style={urgent}>Time is up! Please turn in your exam.</span>}\n\n        <h2 className=\"timer\">{this.state.date.toLocaleTimeString()}</h2>\n        <div className=\"announcement\">\n          <h3>Start time: {this.props.start_time.toLocaleTimeString()}</h3>\n          <h3>End time: {this.props.end_time.toLocaleTimeString()}</h3>\n          <p>{this.props.instructions}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}